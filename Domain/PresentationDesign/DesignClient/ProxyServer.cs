//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IDesignerService")]
public interface IDesignerService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerService/DoCommand", ReplyAction="http://tempuri.org/IDesignerService/DoCommandResponse")]
    void DoCommand(string message);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IDesignerServiceChannel : IDesignerService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class DesignerServiceClient : System.ServiceModel.ClientBase<IDesignerService>, IDesignerService
{
    
    public DesignerServiceClient()
    {
    }
    
    public DesignerServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public DesignerServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public DesignerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public DesignerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void DoCommand(string message)
    {
        base.Channel.DoCommand(message);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="ILoginService", CallbackContract=typeof(ILoginServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
public interface ILoginService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/Login", ReplyAction="http://tempuri.org/ILoginService/LoginResponse")]
    TechnicalServices.Entity.UserIdentity Login(string name, byte[] hash, string hostName);
    
    [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/ILoginService/Logoff", ReplyAction="http://tempuri.org/ILoginService/LogoffResponse")]
    void Logoff(TechnicalServices.Entity.UserIdentity user);
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ILoginService/GetUserLoginCollection", ReplyAction="http://tempuri.org/ILoginService/GetUserLoginCollectionResponse")]
    TechnicalServices.Entity.UserIdentity[] GetUserLoginCollection();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface ILoginServiceCallback
{
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILoginService/LoginStatusChange")]
    void LoginStatusChange(TechnicalServices.Entity.UserIdentity user, TechnicalServices.Entity.LogOnStatus newLoginStatus);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface ILoginServiceChannel : ILoginService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class LoginServiceClient : System.ServiceModel.DuplexClientBase<ILoginService>, ILoginService
{
    
    public LoginServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
            base(callbackInstance)
    {
    }
    
    public LoginServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
            base(callbackInstance, endpointConfigurationName)
    {
    }
    
    public LoginServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public LoginServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public LoginServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, binding, remoteAddress)
    {
    }
    
    public TechnicalServices.Entity.UserIdentity Login(string name, byte[] hash, string hostName)
    {
        return base.Channel.Login(name, hash, hostName);
    }
    
    public void Logoff(TechnicalServices.Entity.UserIdentity user)
    {
        base.Channel.Logoff(user);
    }
    
    public TechnicalServices.Entity.UserIdentity[] GetUserLoginCollection()
    {
        return base.Channel.GetUserLoginCollection();
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IPresentationWorker", CallbackContract=typeof(IPresentationWorkerCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
public interface IPresentationWorker
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/GetPresentationInfoList", ReplyAction="http://tempuri.org/IPresentationWorker/GetPresentationInfoListResponse")]
    TechnicalServices.Common.PresentationInfo[] GetPresentationInfoList();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/GetPresentation", ReplyAction="http://tempuri.org/IPresentationWorker/GetPresentationResponse")]
    byte[] GetPresentation(string uniqueName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/GetPresentationForEdit", ReplyAction="http://tempuri.org/IPresentationWorker/GetPresentationForEditResponse")]
    byte[] GetPresentationForEdit(TechnicalServices.Entity.UserIdentity userIdentity, string uniqueName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/CreatePresentation", ReplyAction="http://tempuri.org/IPresentationWorker/CreatePresentationResponse")]
    bool CreatePresentation(byte[] presentation);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/SavePresentationChanges", ReplyAction="http://tempuri.org/IPresentationWorker/SavePresentationChangesResponse")]
    bool SavePresentationChanges(TechnicalServices.Entity.UserIdentity userIdentity, byte[] presentation);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/SaveSlideChanges", ReplyAction="http://tempuri.org/IPresentationWorker/SaveSlideChangesResponse")]
    bool SaveSlideChanges(TechnicalServices.Entity.UserIdentity userIdentity, byte[] presentation);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/DeletePresentation", ReplyAction="http://tempuri.org/IPresentationWorker/DeletePresentationResponse")]
    bool DeletePresentation(TechnicalServices.Entity.UserIdentity userIdentity, string uniqueName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/GetPresentationStatus", ReplyAction="http://tempuri.org/IPresentationWorker/GetPresentationStatusResponse")]
    TechnicalServices.Entity.PresentationStatus GetPresentationStatus(out TechnicalServices.Entity.UserIdentity userIdentity, string uniqueName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/AcquireLockForPresentation", ReplyAction="http://tempuri.org/IPresentationWorker/AcquireLockForPresentationResponse")]
    bool AcquireLockForPresentation(TechnicalServices.Entity.UserIdentity userIdentity, string uniqueName, TechnicalServices.Entity.RequireLock requireLock);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/ReleaseLockForPresentation", ReplyAction="http://tempuri.org/IPresentationWorker/ReleaseLockForPresentationResponse")]
    bool ReleaseLockForPresentation(TechnicalServices.Entity.UserIdentity userIdentity, string uniqueName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/AcquireLockForSlide", ReplyAction="http://tempuri.org/IPresentationWorker/AcquireLockForSlideResponse")]
    bool AcquireLockForSlide(TechnicalServices.Entity.UserIdentity userIdentity, string presentationUniqueName, int slideId, TechnicalServices.Entity.RequireLock requireLock);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/ReleaseLockForSlide", ReplyAction="http://tempuri.org/IPresentationWorker/ReleaseLockForSlideResponse")]
    bool ReleaseLockForSlide(TechnicalServices.Entity.UserIdentity userIdentity, string presentationUniqueName, int slideId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/GetLockingInfo", ReplyAction="http://tempuri.org/IPresentationWorker/GetLockingInfoResponse")]
    TechnicalServices.Locking.Locking.LockingInfo[] GetLockingInfo(TechnicalServices.Common.Locking.ObjectKey[] objectKeyArr);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/GetLockingInfoByPresentationName", ReplyAction="http://tempuri.org/IPresentationWorker/GetLockingInfoByPresentationNameResponse")]
    TechnicalServices.Locking.Locking.LockingInfo[] GetLockingInfoByPresentationName(string uniqueName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/SaveSource", ReplyAction="http://tempuri.org/IPresentationWorker/SaveSourceResponse")]
    void SaveSource(TechnicalServices.Common.FileTransferObject obj);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/SaveSourceWithAnotherName", ReplyAction="http://tempuri.org/IPresentationWorker/SaveSourceWithAnotherNameResponse")]
    string SaveSourceWithAnotherName(TechnicalServices.Common.FileTransferObject obj);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/DeleteSource", ReplyAction="http://tempuri.org/IPresentationWorker/DeleteSourceResponse")]
    bool DeleteSource(TechnicalServices.Common.ResourceDescriptor descriptor);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/GetSourceStatus", ReplyAction="http://tempuri.org/IPresentationWorker/GetSourceStatusResponse")]
    TechnicalServices.Entity.FileSaveStatus GetSourceStatus(TechnicalServices.Common.ResourceDescriptor descriptor);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/TrySaveSource", ReplyAction="http://tempuri.org/IPresentationWorker/TrySaveSourceResponse")]
    TechnicalServices.Entity.FileSaveStatus TrySaveSource(TechnicalServices.Common.FileTransferObject obj);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/GetSource", ReplyAction="http://tempuri.org/IPresentationWorker/GetSourceResponse")]
    System.Nullable<TechnicalServices.Common.FileTransferObject> GetSource(TechnicalServices.Common.ResourceDescriptor resourceDescriptor);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/GetGlobalSources", ReplyAction="http://tempuri.org/IPresentationWorker/GetGlobalSourcesResponse")]
    TechnicalServices.Common.ResourceDescriptor[] GetGlobalSources();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/GetLocalSources", ReplyAction="http://tempuri.org/IPresentationWorker/GetLocalSourcesResponse")]
    TechnicalServices.Common.ResourceDescriptor[] GetLocalSources(TechnicalServices.Common.PresentationInfo info);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPresentationWorker/GetPresentationWhichContainsSource", ReplyAction="http://tempuri.org/IPresentationWorker/GetPresentationWhichContainsSourceResponse" +
        "")]
    TechnicalServices.Common.PresentationInfo[] GetPresentationWhichContainsSource(TechnicalServices.Common.ResourceDescriptor resourceDescriptor);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IPresentationWorkerCallback
{
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPresentationWorker/ObjectLocked")]
    void ObjectLocked(TechnicalServices.Locking.Locking.LockingInfo lockingInfo);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPresentationWorker/ObjectUnLocked")]
    void ObjectUnLocked(TechnicalServices.Locking.Locking.LockingInfo lockingInfo);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IPresentationWorkerChannel : IPresentationWorker, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class PresentationWorkerClient : System.ServiceModel.DuplexClientBase<IPresentationWorker>, IPresentationWorker
{
    
    public PresentationWorkerClient(System.ServiceModel.InstanceContext callbackInstance) : 
            base(callbackInstance)
    {
    }
    
    public PresentationWorkerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
            base(callbackInstance, endpointConfigurationName)
    {
    }
    
    public PresentationWorkerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public PresentationWorkerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public PresentationWorkerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, binding, remoteAddress)
    {
    }
    
    public TechnicalServices.Common.PresentationInfo[] GetPresentationInfoList()
    {
        return base.Channel.GetPresentationInfoList();
    }
    
    public byte[] GetPresentation(string uniqueName)
    {
        return base.Channel.GetPresentation(uniqueName);
    }
    
    public byte[] GetPresentationForEdit(TechnicalServices.Entity.UserIdentity userIdentity, string uniqueName)
    {
        return base.Channel.GetPresentationForEdit(userIdentity, uniqueName);
    }
    
    public bool CreatePresentation(byte[] presentation)
    {
        return base.Channel.CreatePresentation(presentation);
    }
    
    public bool SavePresentationChanges(TechnicalServices.Entity.UserIdentity userIdentity, byte[] presentation)
    {
        return base.Channel.SavePresentationChanges(userIdentity, presentation);
    }
    
    public bool SaveSlideChanges(TechnicalServices.Entity.UserIdentity userIdentity, byte[] presentation)
    {
        return base.Channel.SaveSlideChanges(userIdentity, presentation);
    }
    
    public bool DeletePresentation(TechnicalServices.Entity.UserIdentity userIdentity, string uniqueName)
    {
        return base.Channel.DeletePresentation(userIdentity, uniqueName);
    }
    
    public TechnicalServices.Entity.PresentationStatus GetPresentationStatus(out TechnicalServices.Entity.UserIdentity userIdentity, string uniqueName)
    {
        return base.Channel.GetPresentationStatus(out userIdentity, uniqueName);
    }
    
    public bool AcquireLockForPresentation(TechnicalServices.Entity.UserIdentity userIdentity, string uniqueName, TechnicalServices.Entity.RequireLock requireLock)
    {
        return base.Channel.AcquireLockForPresentation(userIdentity, uniqueName, requireLock);
    }
    
    public bool ReleaseLockForPresentation(TechnicalServices.Entity.UserIdentity userIdentity, string uniqueName)
    {
        return base.Channel.ReleaseLockForPresentation(userIdentity, uniqueName);
    }
    
    public bool AcquireLockForSlide(TechnicalServices.Entity.UserIdentity userIdentity, string presentationUniqueName, int slideId, TechnicalServices.Entity.RequireLock requireLock)
    {
        return base.Channel.AcquireLockForSlide(userIdentity, presentationUniqueName, slideId, requireLock);
    }
    
    public bool ReleaseLockForSlide(TechnicalServices.Entity.UserIdentity userIdentity, string presentationUniqueName, int slideId)
    {
        return base.Channel.ReleaseLockForSlide(userIdentity, presentationUniqueName, slideId);
    }
    
    public TechnicalServices.Locking.Locking.LockingInfo[] GetLockingInfo(TechnicalServices.Common.Locking.ObjectKey[] objectKeyArr)
    {
        return base.Channel.GetLockingInfo(objectKeyArr);
    }
    
    public TechnicalServices.Locking.Locking.LockingInfo[] GetLockingInfoByPresentationName(string uniqueName)
    {
        return base.Channel.GetLockingInfoByPresentationName(uniqueName);
    }
    
    public void SaveSource(TechnicalServices.Common.FileTransferObject obj)
    {
        base.Channel.SaveSource(obj);
    }
    
    public string SaveSourceWithAnotherName(TechnicalServices.Common.FileTransferObject obj)
    {
        return base.Channel.SaveSourceWithAnotherName(obj);
    }
    
    public bool DeleteSource(TechnicalServices.Common.ResourceDescriptor descriptor)
    {
        return base.Channel.DeleteSource(descriptor);
    }
    
    public TechnicalServices.Entity.FileSaveStatus GetSourceStatus(TechnicalServices.Common.ResourceDescriptor descriptor)
    {
        return base.Channel.GetSourceStatus(descriptor);
    }
    
    public TechnicalServices.Entity.FileSaveStatus TrySaveSource(TechnicalServices.Common.FileTransferObject obj)
    {
        return base.Channel.TrySaveSource(obj);
    }
    
    public System.Nullable<TechnicalServices.Common.FileTransferObject> GetSource(TechnicalServices.Common.ResourceDescriptor resourceDescriptor)
    {
        return base.Channel.GetSource(resourceDescriptor);
    }
    
    public TechnicalServices.Common.ResourceDescriptor[] GetGlobalSources()
    {
        return base.Channel.GetGlobalSources();
    }
    
    public TechnicalServices.Common.ResourceDescriptor[] GetLocalSources(TechnicalServices.Common.PresentationInfo info)
    {
        return base.Channel.GetLocalSources(info);
    }
    
    public TechnicalServices.Common.PresentationInfo[] GetPresentationWhichContainsSource(TechnicalServices.Common.ResourceDescriptor resourceDescriptor)
    {
        return base.Channel.GetPresentationWhichContainsSource(resourceDescriptor);
    }
}
